// Generated by gencpp from file motoman_viz_msgs/EuclideanLinkTrajectoryPoint.msg
// DO NOT EDIT!


#ifndef MOTOMAN_VIZ_MSGS_MESSAGE_EUCLIDEANLINKTRAJECTORYPOINT_H
#define MOTOMAN_VIZ_MSGS_MESSAGE_EUCLIDEANLINKTRAJECTORYPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace motoman_viz_msgs
{
template <class ContainerAllocator>
struct EuclideanLinkTrajectoryPoint_
{
  typedef EuclideanLinkTrajectoryPoint_<ContainerAllocator> Type;

  EuclideanLinkTrajectoryPoint_()
    : pose()
    , time_from_start()  {
    }
  EuclideanLinkTrajectoryPoint_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , time_from_start()  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _pose_type;
  _pose_type pose;

   typedef ros::Duration _time_from_start_type;
  _time_from_start_type time_from_start;





  typedef boost::shared_ptr< ::motoman_viz_msgs::EuclideanLinkTrajectoryPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motoman_viz_msgs::EuclideanLinkTrajectoryPoint_<ContainerAllocator> const> ConstPtr;

}; // struct EuclideanLinkTrajectoryPoint_

typedef ::motoman_viz_msgs::EuclideanLinkTrajectoryPoint_<std::allocator<void> > EuclideanLinkTrajectoryPoint;

typedef boost::shared_ptr< ::motoman_viz_msgs::EuclideanLinkTrajectoryPoint > EuclideanLinkTrajectoryPointPtr;
typedef boost::shared_ptr< ::motoman_viz_msgs::EuclideanLinkTrajectoryPoint const> EuclideanLinkTrajectoryPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motoman_viz_msgs::EuclideanLinkTrajectoryPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motoman_viz_msgs::EuclideanLinkTrajectoryPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::motoman_viz_msgs::EuclideanLinkTrajectoryPoint_<ContainerAllocator1> & lhs, const ::motoman_viz_msgs::EuclideanLinkTrajectoryPoint_<ContainerAllocator2> & rhs)
{
  return lhs.pose == rhs.pose &&
    lhs.time_from_start == rhs.time_from_start;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::motoman_viz_msgs::EuclideanLinkTrajectoryPoint_<ContainerAllocator1> & lhs, const ::motoman_viz_msgs::EuclideanLinkTrajectoryPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace motoman_viz_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::motoman_viz_msgs::EuclideanLinkTrajectoryPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motoman_viz_msgs::EuclideanLinkTrajectoryPoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motoman_viz_msgs::EuclideanLinkTrajectoryPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motoman_viz_msgs::EuclideanLinkTrajectoryPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motoman_viz_msgs::EuclideanLinkTrajectoryPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motoman_viz_msgs::EuclideanLinkTrajectoryPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motoman_viz_msgs::EuclideanLinkTrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1364aa60c4c43a769a773a5e77276f1f";
  }

  static const char* value(const ::motoman_viz_msgs::EuclideanLinkTrajectoryPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1364aa60c4c43a76ULL;
  static const uint64_t static_value2 = 0x9a773a5e77276f1fULL;
};

template<class ContainerAllocator>
struct DataType< ::motoman_viz_msgs::EuclideanLinkTrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motoman_viz_msgs/EuclideanLinkTrajectoryPoint";
  }

  static const char* value(const ::motoman_viz_msgs::EuclideanLinkTrajectoryPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motoman_viz_msgs::EuclideanLinkTrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose[] pose\n"
"duration time_from_start\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::motoman_viz_msgs::EuclideanLinkTrajectoryPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motoman_viz_msgs::EuclideanLinkTrajectoryPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.time_from_start);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EuclideanLinkTrajectoryPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motoman_viz_msgs::EuclideanLinkTrajectoryPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motoman_viz_msgs::EuclideanLinkTrajectoryPoint_<ContainerAllocator>& v)
  {
    s << indent << "pose[]" << std::endl;
    for (size_t i = 0; i < v.pose.size(); ++i)
    {
      s << indent << "  pose[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.pose[i]);
    }
    s << indent << "time_from_start: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.time_from_start);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTOMAN_VIZ_MSGS_MESSAGE_EUCLIDEANLINKTRAJECTORYPOINT_H
