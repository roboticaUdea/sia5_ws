// Generated by gencpp from file dhand_msgs/Servo_move.msg
// DO NOT EDIT!


#ifndef DHAND_MSGS_MESSAGE_SERVO_MOVE_H
#define DHAND_MSGS_MESSAGE_SERVO_MOVE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dhand_msgs
{
template <class ContainerAllocator>
struct Servo_move_
{
  typedef Servo_move_<ContainerAllocator> Type;

  Servo_move_()
    : position(0.0)
    , speed(0.0)
    , acceleration(0.0)
    , current_limit(0.0)  {
    }
  Servo_move_(const ContainerAllocator& _alloc)
    : position(0.0)
    , speed(0.0)
    , acceleration(0.0)
    , current_limit(0.0)  {
  (void)_alloc;
    }



   typedef double _position_type;
  _position_type position;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _acceleration_type;
  _acceleration_type acceleration;

   typedef double _current_limit_type;
  _current_limit_type current_limit;





  typedef boost::shared_ptr< ::dhand_msgs::Servo_move_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dhand_msgs::Servo_move_<ContainerAllocator> const> ConstPtr;

}; // struct Servo_move_

typedef ::dhand_msgs::Servo_move_<std::allocator<void> > Servo_move;

typedef boost::shared_ptr< ::dhand_msgs::Servo_move > Servo_movePtr;
typedef boost::shared_ptr< ::dhand_msgs::Servo_move const> Servo_moveConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dhand_msgs::Servo_move_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dhand_msgs::Servo_move_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dhand_msgs::Servo_move_<ContainerAllocator1> & lhs, const ::dhand_msgs::Servo_move_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.speed == rhs.speed &&
    lhs.acceleration == rhs.acceleration &&
    lhs.current_limit == rhs.current_limit;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dhand_msgs::Servo_move_<ContainerAllocator1> & lhs, const ::dhand_msgs::Servo_move_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dhand_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dhand_msgs::Servo_move_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dhand_msgs::Servo_move_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dhand_msgs::Servo_move_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dhand_msgs::Servo_move_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dhand_msgs::Servo_move_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dhand_msgs::Servo_move_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dhand_msgs::Servo_move_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f4d227c5ad8478d7a617baffca61e782";
  }

  static const char* value(const ::dhand_msgs::Servo_move_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf4d227c5ad8478d7ULL;
  static const uint64_t static_value2 = 0xa617baffca61e782ULL;
};

template<class ContainerAllocator>
struct DataType< ::dhand_msgs::Servo_move_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dhand_msgs/Servo_move";
  }

  static const char* value(const ::dhand_msgs::Servo_move_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dhand_msgs::Servo_move_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 position\n"
"float64 speed\n"
"float64 acceleration\n"
"float64 current_limit\n"
;
  }

  static const char* value(const ::dhand_msgs::Servo_move_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dhand_msgs::Servo_move_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.speed);
      stream.next(m.acceleration);
      stream.next(m.current_limit);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Servo_move_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dhand_msgs::Servo_move_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dhand_msgs::Servo_move_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    Printer<double>::stream(s, indent + "  ", v.position);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration);
    s << indent << "current_limit: ";
    Printer<double>::stream(s, indent + "  ", v.current_limit);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DHAND_MSGS_MESSAGE_SERVO_MOVE_H
